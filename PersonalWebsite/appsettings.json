{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=aspnet-PersonalWebsite-015F7A75-8099-44C2-86A9-5DAA5C29AE1B;Trusted_Connection=True;MultipleActiveResultSets=true"
  },
  "Logging": {
    "IncludeScopes": false,
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "PasswordHash": "332lEKb+GrZKV+SWh7mx0jnmR4UOy3ukm1Qt8GpZHRE=",
  "Projects": {
    "MathematicsQuestionGeneratorApi": {
      "Title": "Mathematics Question Generator Api",

      "What": "An API with several functions involving the random generation of a small number of mathematics questions. I only implemented quadratic equations, simultaneous equations, and general polynomials as my focus here was on learning how to build an ASP.NET Core 2.0 API rather than the questions generated. This project includes a database of all email addresses that have requested worksheets and all worksheets they have requested.",

      "Why": "I was tutoring and found myself doing some very repetitive work to write down questions to ask students. I decided to automate this with a fairly small console app at first, but decided to take this as an opportunity to learn while building something both useful and interesting.",

      "HowToUse": [ "There are several API actions, for each question type it can generate a random question satisfying some default properties. With a POST request it can generate a question satisfying the properties put in the request body. The response includes the question and the solutions. Additionally there is a controller for emailing a worksheet of questions as a pdf, where the questions satisfy the properties in the request body." ],

      "Thoughts": [
        "I deliberately tried to over-engineer this, and likely went too far in come places. However this did leave me with some very general methods and almost no duplicated code. I made heavy use of generics to implement this, some methods taking up to 4 generic parameters. In hindsight I could have designed this better.",
        "I didn't structure this properly, I had all my logic in the models and controllers (often mixed between the two). I should have had a separate logic layer to handle all of this.",
        "The database is fairly pointless, but I saw it as a good opportunity to learn about entity framework.",
        "My unit tests were actually integration tests, in hindsight I should have made my code more testable and written proper unit tests with mocking.",
        "The number of parameters needed to specify what conditions the question was to satisfy is fairly big, and could easily be made bigger with more options. I couldn't find a better way to do this, and later this inspired me to write the JsonBooleanEvaluator."
      ],

      "LanguagesAndLibraries": [
        {
          "LanguageOrLibrary": "C#",
          "Description": "This is what it was written in."
        },
        {
          "LanguageOrLibrary": "ASP.NET Core 2.0",
          "Description": "The framework used."
        },
        {
          "LanguageOrLibrary": "Entity Framework",
          "Description": "This was used for the database."
        },
        {
          "LanguageOrLibrary": "iTextSharp",
          "Description": "Used to create the PDFs."
        },
        {
          "LanguageOrLibrary": "Azure",
          "Description": "Breifly used to host this using the free trial."
        }
      ]
    },
    "MathematicsQuestionsWebsite": {
      "Title": "Mathematics Question Generator Website",

      "What": "A website for my Mathematics Question Generator Api.",

      "Why": "I wanted a simple front end to make the API easier to use.",

      "HowToUse": ["Each question type has a page for generating a question and checking if your answers are correct. There is also the option of requestion a worksheet with a user specified number of questions."],

      "Thoughts": [
        "I wrote this in react, in hindsight standard HTML and JavaScript would have been far easier and simpler.",
        "It isn't much to look at, I'm not so great with design so I kept it very simplistic. I did, however, put effort into making it usable and having helpful error messages and client side validation."
      ],

      "LanguagesAndLibraries": [
        {
          "LanguageOrLibrary": "TypeScript (React)",
          "Description": "Used to write the website."
        },
        {
          "LanguageOrLibrary": "HTML and CSS",
          "Description": "Used as part of the React framework."
        },
        {
          "LanguageOrLibrary": null,
          "AWS": "Used to host this until I had to take the API down as the free trial ran out."
        }
      ]
    },
	"UkcLogbookMapper": {
      "Title": "Ukc Logbook Mapper",

      "What": "A website that takes a UKC username and uses google maps to show all the places you have climbed (according to your logbook). It uses web scraping to read data from the UKC website, uses the google maps API to figure out crag locations, and marks them on a map.",

      "Why": "This is a feature that doesn't seem to be implemented on the main UKC website, so I decided to try and implement it myself.",

    "HowToUse": [ "Simply go to the site and enter your username." ],

      "Thoughts": [
        "I didn't deploy this since I would need permission from UKC.",
        "This project ended using a lot of static methods to read from the UKC website, and feels more procedual that object oriented. If it was to get any bigger I'd redesign it.",
        "Pulling locations from the google API was very slow, so I added a database as a permanent cache of crag locations to speed everything up. The web scraping was surpisingly fase, and certainly not the bottle neck.",
        "The actual website is fairly bad, but due to being unable to deploy this I didn't want to put much effort into that part. This was more of a proof of concept and I plan to build on this idea later."
      ],

      "LanguagesAndLibraries": [
        {
          "LanguageOrLibrary": "C#",
          "Description": "This is what it was written in."
        },
        {
          "LanguageOrLibrary": "ASP.NET Core 2.0",
          "Description": "The framework used."
        },
        {
          "LanguageOrLibrary": "Entity Framework",
          "Description": "This was used for the database."
        },
        {
          "LanguageOrLibrary": "iTextSharp",
          "Description": "Used to create the PDFs."
        },
        {
          "LanguageOrLibrary": "Azure",
          "Description": "Breifly used to host this using the free trial."
        }
      ]
    },
	"JsonBooleanEvaluator": {
      "Title": "Json Boolean Evaluator",

      "What": "A minimalist syntax for checking if a Json object satisfies a boolean condition.",

      "Why": "When writing my mathematics questions generator, I found myself using some fairly large objects for the conditions the user might want the question to satisfy. This function would instead allow the user to specify any condition that can be expressed in this syntax, which is all conditions I offered in the condition objects and much more complex ones.",

    "HowToUse": [
      "Call the main function with a char* for the condition, and a char** for the array of Json objects to be checked. The return value is an int* of the results (0 for false, 1 for true).",
      "This is written in C++ with a C interface, so you will need to be able to call C code.",
      "For performance reasons I recommend sending lots of Json string in one go, rather than repeatedly calling it. The interpreter does some slow work to parse the condition of a form that is fast to evaluate, and sending lots of Json objects in one go reduces the number of times this has to be done.",
      "The only elements of the Json object that can be involved in the condition are integers, booleans, and arrays of these. Other types can be in the object, just cannot be in the condition.",
      "The syntax is fairly simple. The Json object must be of the form { ... }, and not a primative type.",
      "Accessing elements: If the object was, for example, { a: {b: 5} }, you would access the value of property b with [\"a\"][\"b\"].",
      "Basic arithmetic and boolean operations are allowed, these are +, -, *, /, &, !, |, with their usual meanings.",
      "Additionally, to allow the use of arrays in a nontrivial way, I added the array methods filter, any, and all. These methods act on an array and take a lambda as a parameter. Examples coming soon."

    ],

      "Thoughts": [
        "This isn't implemented int he most efficient way, I plan to make some upgrades as soon as I've done more research on the topic.",
        "I have verified that the code works, but I still need to ensure that it is compiled correctly and can be called from another language.",
        "This was my first time writing in C++, so the code is a bit messy in places. When I go to re-implement parts of it I will fix it up.",
        "With the array methods this does nearly any condition that I could want it to do. However I'd be interested to see what more operations are needed (if it is even impossible) to allow any condition that can be implemented in a standard programming language to be expressed in this syntax. It is certainly not currently possible, for example it cannot (as far as I can tell) say if a number is prime or not. However prime checking could be done if I included something like C#s Enumerable.GetRange(a, b) function."
      ],

      "LanguagesAndLibraries": [
        {
          "LanguageOrLibrary": "C++",
          "Description": "This is what it was written in."
        },
        {
          "LanguageOrLibrary": "Nlohmann.Json",
          "Description": "The Json parsing library."
        },
        {
          "LanguageOrLibrary": "C",
          "Description": "The external interface."
        }
      ]
    }
  }
}
