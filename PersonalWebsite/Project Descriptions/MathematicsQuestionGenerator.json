{
	"Title": "Mathematics Question Generator Api",
	
	"What": "An API with several functions involving the random generation of a small number of mathematics questions. I only implemented quadratic equations, simultaneous equations, and general polynomials as my focus here was on learning how to build an ASP.NET Core 2.0 API rather than the questions generated. This project includes a database of all email addresses that have requested worksheets and all worksheets they have requested.",

	"Why": "I was tutoring and found myself doing some very repetitive work to write down questions to ask students. I decided to automate this with a fairly small console app at first, but decided to take this as an opportunity to learn while building something both useful and interesting.",

	"HowToUse": "There are several API actions, for each question type it can generate a random question satisfying some default properties. With a POST request it can generate a question satisfying the properties put in the request body. The response includes the question and the solutions. Additionally there is a controller for emailing a worksheet of questions as a pdf, where the questions satisfy the properties in the request body.",

	"Thoughts": [
	"I deliberately tried to over-engineer this, and likely went too far in come places. However this did leave me with some very general methods and almost no duplicated code. I made heavy use of generics to implement this, some methods taking up to 4 generic parameters. In hindsight I could have designed this better.",
	"I didn't structure this properly, I had all my logic in the models and controllers (often mixed between the two). I should have had a separate logic layer to handle all of this.",
	"The database is fairly pointless, but I saw it as a good opportunity to learn about entity framework.",
	"My unit tests were actually integration tests, in hindsight I should have made my code more testable and written proper unit tests with mocking.",
	"The number of parameters needed to specify what conditions the question was to satisfy is fairly big, and could easily be made bigger with more options. I couldn't find a better way to do this, and later this inspired me to write the JsonBooleanEvaluator."],

	"LanguagesAndLibraries": [
		{ "LanguageOrLibrary": "C#", "Description": "This is what it was written in." },
		{ "LanguageOrLibrary":  "ASP.NET Core 2.0", "Description": "The framework used." },
		{ "LanguageOrLibrary": "Entity Framework", "Description": "This was used for the database." },
		{ "LanguageOrLibrary": "iTextSharp", "Description": "Used to create the PDFs." },
		{ "LanguageOrLibrary": "Azure", "Description": "Breifly used to host this using the free trial." }
	]
}